// <auto-generated />
using DeanerySystem.DataAccess.Concrete;
using DeanerySystem.DataAccess.Entities.Enums;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace DeanerySystem.DataAccess.Migrations
{
    [DbContext(typeof(DeaneryDbContext))]
    [Migration("20180310164323_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.Cellule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<int>("JournalId");

                    b.Property<string>("Mark");

                    b.Property<Guid>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("JournalId");

                    b.HasIndex("StudentId");

                    b.ToTable("Cellules");
                });

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClassType");

                    b.Property<string>("Description");

                    b.Property<Guid?>("ProfessorId")
                        .IsRequired();

                    b.Property<int>("SubjectId");

                    b.HasKey("Id");

                    b.HasIndex("ProfessorId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.ClassNumberTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<TimeSpan>("End");

                    b.Property<int>("Number");

                    b.Property<TimeSpan>("Start");

                    b.Property<int>("TimeTableId");

                    b.HasKey("Id");

                    b.HasIndex("TimeTableId");

                    b.ToTable("ClassNumberTimes");
                });

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("HeadId");

                    b.Property<string>("Name");

                    b.Property<int>("Number");

                    b.Property<int>("StreamId");

                    b.HasKey("Id");

                    b.HasIndex("HeadId")
                        .IsUnique()
                        .HasFilter("[HeadId] IS NOT NULL");

                    b.HasIndex("StreamId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.EducationalPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("GroupId");

                    b.Property<int>("SemesterId");

                    b.Property<int>("SubjectId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("SubjectId");

                    b.ToTable("EducationalPlans");
                });

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("DeanId");

                    b.Property<string>("Name");

                    b.Property<int>("UniversityId");

                    b.HasKey("Id");

                    b.HasIndex("DeanId")
                        .IsUnique()
                        .HasFilter("[DeanId] IS NOT NULL");

                    b.HasIndex("UniversityId");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.FailureTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsPassed");

                    b.Property<DateTime>("PassingDate");

                    b.Property<Guid>("StudentId");

                    b.Property<int>("SubjectId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("FailureTickets");
                });

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DepartmentId");

                    b.Property<Guid?>("MentorId");

                    b.Property<string>("Name");

                    b.Property<int>("Tuition");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("MentorId")
                        .IsUnique()
                        .HasFilter("[MentorId] IS NOT NULL");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.Identity.DeaneryRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles","dbo");
                });

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.Identity.DeaneryRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims","dbo");
                });

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.Identity.DeaneryUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("LatinFirstName");

                    b.Property<string>("LatinLastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("MiddleName");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users","dbo");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DeaneryUser");
                });

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.Identity.DeaneryUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims","dbo");
                });

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.Identity.DeaneryUserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.Identity.DeaneryUserRole", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles","dbo");
                });

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.Identity.DeaneryUserToken", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens","dbo");
                });

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.Journal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClassId");

                    b.Property<int>("JournalType");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Journals");
                });

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.ProgressRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("ExamMark");

                    b.Property<Guid>("StudentId");

                    b.Property<int>("SubjectId");

                    b.Property<double>("TermMark");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("ProgressRecords");
                });

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.Semester", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreditSessionStart");

                    b.Property<DateTime>("End");

                    b.Property<int>("Number");

                    b.Property<DateTime>("SecondWritingStart");

                    b.Property<DateTime>("SessionStart");

                    b.Property<DateTime>("Start");

                    b.Property<DateTime>("ThirdWritingStart");

                    b.HasKey("Id");

                    b.ToTable("Semesters");
                });

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.Stream", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FacultyId");

                    b.Property<string>("Name");

                    b.Property<string>("StreamAbbreviation");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("Streams");
                });

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.StudentSemester", b =>
                {
                    b.Property<Guid>("StudentId");

                    b.Property<int>("SemesterId");

                    b.HasKey("StudentId", "SemesterId");

                    b.HasIndex("SemesterId");

                    b.ToTable("StudentSemesters");
                });

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int>("NumberOfConsultations");

                    b.Property<int>("NumberOfLectures");

                    b.Property<int>("NumberOfPracticalClasses");

                    b.Property<int>("NumberOflLaboratoryClasses");

                    b.Property<DateTime?>("PassingDate");

                    b.Property<int>("SemesterControl");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.TimeTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClassId");

                    b.Property<int>("DayOfWeek");

                    b.Property<int>("Fraction");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("TimeTables");
                });

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.University", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<Guid?>("RectorId");

                    b.HasKey("Id");

                    b.HasIndex("RectorId")
                        .IsUnique()
                        .HasFilter("[RectorId] IS NOT NULL");

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.Professor", b =>
                {
                    b.HasBaseType("DeanerySystem.DataAccess.Entities.Identity.DeaneryUser");

                    b.Property<int?>("DepartmentId");

                    b.Property<int>("Position");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Professor");

                    b.HasDiscriminator().HasValue("Professor");
                });

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.Student", b =>
                {
                    b.HasBaseType("DeanerySystem.DataAccess.Entities.Identity.DeaneryUser");

                    b.Property<int?>("GroupId");

                    b.Property<string>("StudentCode");

                    b.Property<int>("TuitionFee");

                    b.HasIndex("GroupId");

                    b.ToTable("Student");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.Cellule", b =>
                {
                    b.HasOne("DeanerySystem.DataAccess.Entities.Journal", "Journal")
                        .WithMany("Cellules")
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DeanerySystem.DataAccess.Entities.Student", "Student")
                        .WithMany("Cellules")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.Class", b =>
                {
                    b.HasOne("DeanerySystem.DataAccess.Entities.Professor", "Professor")
                        .WithMany("Classes")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DeanerySystem.DataAccess.Entities.Subject", "Subject")
                        .WithMany("Classes")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.ClassNumberTime", b =>
                {
                    b.HasOne("DeanerySystem.DataAccess.Entities.TimeTable", "TimeTable")
                        .WithMany("ClassNumberTimes")
                        .HasForeignKey("TimeTableId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.Department", b =>
                {
                    b.HasOne("DeanerySystem.DataAccess.Entities.Professor", "Head")
                        .WithOne("HeadOfDepartment")
                        .HasForeignKey("DeanerySystem.DataAccess.Entities.Department", "HeadId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DeanerySystem.DataAccess.Entities.Stream", "Stream")
                        .WithMany("Departments")
                        .HasForeignKey("StreamId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.EducationalPlan", b =>
                {
                    b.HasOne("DeanerySystem.DataAccess.Entities.Group", "Group")
                        .WithMany("EducationalPlans")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DeanerySystem.DataAccess.Entities.Semester", "Semester")
                        .WithMany("EducationalPlans")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DeanerySystem.DataAccess.Entities.Subject", "Subject")
                        .WithMany("EducationalPlans")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.Faculty", b =>
                {
                    b.HasOne("DeanerySystem.DataAccess.Entities.Professor", "Dean")
                        .WithOne("DeanOfFaculty")
                        .HasForeignKey("DeanerySystem.DataAccess.Entities.Faculty", "DeanId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DeanerySystem.DataAccess.Entities.University", "University")
                        .WithMany("Faculties")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.FailureTicket", b =>
                {
                    b.HasOne("DeanerySystem.DataAccess.Entities.Student", "Student")
                        .WithMany("FailureTickets")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DeanerySystem.DataAccess.Entities.Subject", "Subject")
                        .WithMany("FailureTickets")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.Group", b =>
                {
                    b.HasOne("DeanerySystem.DataAccess.Entities.Department", "Department")
                        .WithMany("Groups")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DeanerySystem.DataAccess.Entities.Professor", "Mentor")
                        .WithOne("MentorOfGroup")
                        .HasForeignKey("DeanerySystem.DataAccess.Entities.Group", "MentorId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.Identity.DeaneryRoleClaim", b =>
                {
                    b.HasOne("DeanerySystem.DataAccess.Entities.Identity.DeaneryRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.Identity.DeaneryUserClaim", b =>
                {
                    b.HasOne("DeanerySystem.DataAccess.Entities.Identity.DeaneryUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.Identity.DeaneryUserLogin", b =>
                {
                    b.HasOne("DeanerySystem.DataAccess.Entities.Identity.DeaneryUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.Identity.DeaneryUserRole", b =>
                {
                    b.HasOne("DeanerySystem.DataAccess.Entities.Identity.DeaneryRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DeanerySystem.DataAccess.Entities.Identity.DeaneryUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.Identity.DeaneryUserToken", b =>
                {
                    b.HasOne("DeanerySystem.DataAccess.Entities.Identity.DeaneryUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.Journal", b =>
                {
                    b.HasOne("DeanerySystem.DataAccess.Entities.Class", "Class")
                        .WithMany("Journals")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.ProgressRecord", b =>
                {
                    b.HasOne("DeanerySystem.DataAccess.Entities.Student", "Student")
                        .WithMany("ProgressRecords")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DeanerySystem.DataAccess.Entities.Subject", "Subject")
                        .WithMany("ProgressRecords")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.Stream", b =>
                {
                    b.HasOne("DeanerySystem.DataAccess.Entities.Faculty", "Faculty")
                        .WithMany("Streams")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.StudentSemester", b =>
                {
                    b.HasOne("DeanerySystem.DataAccess.Entities.Semester", "Semester")
                        .WithMany("StudentSemesters")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DeanerySystem.DataAccess.Entities.Student", "Student")
                        .WithMany("StudentSemesters")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.TimeTable", b =>
                {
                    b.HasOne("DeanerySystem.DataAccess.Entities.Class", "Class")
                        .WithMany("TimeTables")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.University", b =>
                {
                    b.HasOne("DeanerySystem.DataAccess.Entities.Professor", "Rector")
                        .WithOne("RectorOfUniversity")
                        .HasForeignKey("DeanerySystem.DataAccess.Entities.University", "RectorId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.Professor", b =>
                {
                    b.HasOne("DeanerySystem.DataAccess.Entities.Department", "Department")
                        .WithMany("Professors")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("DeanerySystem.DataAccess.Entities.Student", b =>
                {
                    b.HasOne("DeanerySystem.DataAccess.Entities.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.SetNull);
                });
#pragma warning restore 612, 618
        }
    }
}
